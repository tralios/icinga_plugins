#!/usr/bin/env python3

"""
The script gathers a variety of status parameters for block
devices listed in

    /proc/diskstats

and calculates different moving averages, applies custom
transformations and outputs the so obtained parameters in the form of
a Nagios/Icinga performance string. The script does not check these
values against thresholds and will thus always exit with (OK, 0) if
terminating correctly. The output printed to stdout will thus always
be of the form

    OK | sda_riops=123 sda_rmerges=42 sdb_riops=345 sdb_rmerges=82

depending on which parameters are specified for checking.

As only devices with a major number in CHECKED_MAJOR_NRS (partition
devices with major nr. 8 and a trailing digit are ignored) are
checked, it is possible to only collect parameters of a subset of all
available block devices.

Time averages for all parameters in CHECKED_PARAMS are calculated for
the intervals specified in AVG_INTERVALS.

Before assembling the Icinga performance string, a
CHECKED_PARAMS[function] is applied to the respective *average*
parameter value if existent. This allows for transformations such as
unit changes, scaling, etc...

To keep track of historical values, the script maintains a daily log
under LOG_BASE_DIR and checks for logs of the previous day in both the
same log directory and a subdirectory 'archive'.
"""


import datetime
import itertools
import os
import sys

from collections import OrderedDict


STATUS_MSG = {0: 'OK', 1: 'WARNING', 2: 'ERROR', 3: 'UNKNOWN'}

LOG_BASE_DIR = '/var/log/diskio/'


# checked values from /proc/diskstats. See either of
#
#   - https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats
#   - https://www.kernel.org/doc/Documentation/block/stat.txt
#
# for details
CHECKED_PARAMS = OrderedDict(
    [('readiops',      {'short': 'riops',
                        'col': 0,
                        'checked': True,
                        'display': 'requests'}),
     ('read_merges',   {'short': 'rmerges',
                        'col': 1,
                        'checked': False,
                        'display': 'requests'}),
     ('read',          {'short': 'r',
                        'col': 2,
                        'checked': True,
                        'display': 'bytes',
                        'scale': lambda x: x * 512}),
     ('read_ticks',    {'short': 'rticks',
                        'col': 3,
                        'checked': True,
                        'display': 'milliseconds'}),
     ('writeiops',     {'short': 'wiops',
                        'col': 4,
                        'checked': True,
                        'display': 'requests'}),
     ('write_merges',  {'short': 'wmerges',
                        'col': 5,
                        'checked': False,
                        'display': 'requests'}),
     ('write',         {'short': 'w',
                        'col': 6,
                        'checked': True,
                        'display': 'bytes',
                        'scale': lambda x: x * 512}),
     ('write_ticks',   {'short': 'wt',
                        'col': 7,
                        'checked': False,
                        'display': 'milliseconds'}),
     ('in_flight',     {'short': 'if',
                        'col': 8,
                        'checked': False,
                        'display': 'requests'}),
     ('io_ticks',      {'short': 'io_t',
                        'col': 9,
                        'checked': True,
                        'display': 'percent',
                        'scale': lambda x: x * 0.1}),
     ('time_in_queue', {'short': 'tiq',
                        'col': 10,
                        'checked': False,
                        'display': 'milliseconds'})])

# only block devices with these major numbers are checked
CHECKED_MAJOR_NRS = ['8', '9', '253', '254']

# time intervals for which average values are computed
AVG_INTERVALS = [1, 5, 15]


def sizeof_fmt(num, suffix='B', divide_val=1024.0,
               prefixes=['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']):
    """
    Convert byte number to string representation.
    """
    for unit in prefixes:
        if abs(num) < divide_val:
            return "%3.1f%s%s/s" % (num, unit, suffix)
        num /= divide_val
    return "%.1f%s%s/s" % (num, 'Yi', suffix)


def prettify_value(num, prefix_type):
    if prefix_type == 'requests':
        return sizeof_fmt(num, suffix='', divide_val=1000000,
                          prefixes=['', 'Mio'])
    elif prefix_type == 'bytes':
        return sizeof_fmt(num)
    elif prefix_type == 'milliseconds':
        pass
    elif prefix_type == 'percent':
        pass

    return str(num)


def read_iostat_values():
    """
    Return a dict of block devices to be checked.

    Read all block devices in '/proc/diskstats' that have a major
    number in CHECKED_MAJOR_NRS and return them as a dict including a
    timestamp.

    Devices with major number '8' that end with a digit are considered
    partitions and get ignored.
    """
    reading_time = datetime.datetime.now()
    devices_values = OrderedDict()

    with open('/proc/diskstats', 'r') as diskstat_file:
        lines = diskstat_file.readlines()

    for line in lines:
        split_line = line.split()

        if split_line[0] not in CHECKED_MAJOR_NRS:
            continue

        if split_line[0] == '8' and split_line[2][-1].isdigit():
            continue

        dev = split_line[2]
        devices_values[dev] = {'time': reading_time}

        for name, details in CHECKED_PARAMS.items():
            col = details['col']
            val = int(split_line[col + 3])

            devices_values[dev][name] = val

    return devices_values


def parse_log_tuple(line_tuple):
    """
    Parse a tuple of date/log-line and return the relevant information.

    Assume line_tuple to be of the form (current_date, '%H:%M:%S
    DEVICE [PARAMS]')
    """
    log_file_date, line_str = line_tuple
    split_line = line_str.split()

    try:
        line_time = datetime.datetime.strptime(split_line[0], '%H:%M:%S')
        timestamp = line_time.replace(year=log_file_date.year,
                                      month=log_file_date.month,
                                      day=log_file_date.day)
        device = split_line[1]
        params = [int(param) for param in split_line[2:]]
    except ValueError:
        return None

    return timestamp, device, params


def read_device_parameters(device_current_values, archive_dir='archive'):
    """
    Return device parameter averages.

    Read log file and determine nettraffic averages over the last
    minutes as specified in AVG_INTERVALS.
    """
    time_now = datetime.datetime.now()
    log_file_name = "log-{}".format(time_now.strftime("%Y-%m-%d"))
    log_file_path = os.path.join(LOG_BASE_DIR, log_file_name)

    checked_param_names = [key for key, val in CHECKED_PARAMS.items()
                           if val['checked']]

    # set default values to None
    device_avg_params = OrderedDict()
    for device in device_current_values.keys():
        dev_values = {}
        for interval in AVG_INTERVALS:
            dev_values[interval] = {x: None for x in checked_param_names}
        device_avg_params[device] = dev_values

    with open(log_file_path, 'r') as log_file:
        rev_log_list = [(time_now, l) for l in reversed(log_file.readlines())]

    # also read log file from yesterday if neccesary
    if time_now.hour == 0 and time_now.minute <= max(AVG_INTERVALS):
        time_yesterday = time_now - datetime.timedelta(1)
        log_file_name_yesterday = "log-{}".format(
            time_yesterday.strftime("%Y-%m-%d"))

        # yesterdays log file might still be in the same directory or
        # have already been moved to sub-directory 'archive_dir'
        log_file_path_yesterday_1 = os.path.join(
            LOG_BASE_DIR, log_file_name_yesterday)

        parent_dir = os.path.abspath(os.path.join(LOG_BASE_DIR, os.pardir))
        log_file_path_yesterday_2 = os.path.join(parent_dir, archive_dir,
                                                 log_file_name_yesterday)

        if os.path.isfile(log_file_path_yesterday_1):
            with open(log_file_path_yesterday_1, 'r') as log_file:
                rev_log_list += [(time_yesterday, l)
                                 for l in reversed(log_file.readlines())]

        elif os.path.isfile(log_file_path_yesterday_2):
            with open(log_file_path_yesterday_2, 'r') as log_file:
                rev_log_list += [(time_yesterday, l)
                                 for l in reversed(log_file.readlines())]

    if not rev_log_list:
        print(STATUS_MSG[3] + ": No log files found")
        sys.exit(3)

    for line in rev_log_list:
        timestamp, device, params = parse_log_tuple(line)

        try:
            device_values = device_current_values[device]
        except KeyError:
            continue

        time_diff = (device_values['time'] - timestamp).total_seconds()

        for param, t in itertools.product(checked_param_names, AVG_INTERVALS):
            if time_diff >= t * 60 and not device_avg_params[device][t][param]:
                position = CHECKED_PARAMS[param]['col']

                if device_values[param] < params[position]:
                    avg_val = device_values[param] / time_diff
                else:
                    avg_val = (device_values[param] - params[position]) / time_diff

                if 'scale' in CHECKED_PARAMS[param]:
                    avg_val = CHECKED_PARAMS[param]['scale'](avg_val)

                device_avg_params[device][t][param] = avg_val

    return device_avg_params


def write_iostat_log(log_base_dir, dev_name, reading_time, dev_attributes):
    """
    Write history file for a specific block device.

    All parameters in CHECKED_PARAMS are written to the log regardless
    of whether they are checked or not.
    """
    if os.path.isdir(log_base_dir):
        log_file_name = 'log-' + reading_time.strftime('%Y-%m-%d')
        log_file_path = os.path.join(log_base_dir, log_file_name)

        log_params = [str(dev_attributes[param])
                      for param in CHECKED_PARAMS.keys()]

        log_string = "{timestamp} {device} {params}\n"\
                     .format(timestamp=reading_time.strftime('%H:%M:%S'),
                             device=dev_name,
                             params=' '.join(log_params))

        with open(log_file_path, 'a+') as log_file:
            log_file.write(log_string)


def create_log_dir(logdir):
    """
    Create the log parent directory if it does not exist.
    """
    if not os.path.exists(logdir):
        os.makedirs(logdir)


def icinga_perf_string(device_avg, sep='_', not_existent=0,
                       only_last_minute=True):
    """
    Return the PERFDATA part of the plugins output.

    Take a dict of average network IO values and return an Icinga
    value string.

    If interface belongs to a virtual server RECEIVE and TRANSMIT
    values are swapped and the name of the virtual server is appended
    to the output data

    The dict of average network IO values device_avg is expected to be
    of the form:

        {
            DEVICE: {
                AVG_TIME: {
                    PARAM_NAME: TRANSMIT_VAL
                }
            }
        }
    """
    values = []
    for dev, dev_info in device_avg.items():
        for t, params in dev_info.items():
            for param in params:
                if only_last_minute and t > 1:
                    continue

                if params[param] is not None:
                    num = int(params[param])
                else:
                    num = not_existent

                short_name = CHECKED_PARAMS[param]['short']
                num_str = sep.join([dev, short_name]) + '=' + str(num)
                values.append(num_str)

    return ' '.join(values)


def main():
    create_log_dir(LOG_BASE_DIR)

    iostat_current_values = read_iostat_values()

    # write new log entries
    for bd_name, bd_params in iostat_current_values.items():
        reading_time = bd_params['time']
        io_parameters = {key: bd_params[key]
                         for key in bd_params if key != 'time'}
        write_iostat_log(LOG_BASE_DIR, bd_name, reading_time, io_parameters)

    average_values = read_device_parameters(iostat_current_values)

    print('OK' + " | " + icinga_perf_string(average_values))
    sys.exit(0)


if __name__ == '__main__':
    try:
        main()
    except Exception:
        print('ERROR')
        sys.exit(2)
